diff --git a/js/shs.js b/js/shs.js
index 7d08ff6..5620513 100644
--- a/js/shs.js
+++ b/js/shs.js
@@ -296,7 +296,10 @@
       if (Drupal.settings.chosen) {
         // Remove element created by chosen.
         var elem_id = $(this).attr('id');
+        // Chosen lower than v1
         $element_chzn = $('#' + elem_id.replace(/-/g, '_') + '_chzn');
+        // Chosen v1+.
+        $('#' + elem_id.replace(/-/g, '_') + '_chosen').remove();
         if ($element_chzn) {
           $element_chzn.prev('label').remove();
           $element_chzn.remove();
@@ -420,30 +423,18 @@
    */
   shsElementCreate = function(base_id, settings, level) {
     // Create element and initially hide it.
+    $element = $('<select>')
+      .attr('id', base_id + '-select-' + level)
+      .addClass('shs-select')
+      // Add core class to apply default styles to the element.
+      .addClass('form-select')
+      .addClass('shs-select-level-' + level)
+      .bind('change', function() {
+        updateElements($(this), base_id, settings, level);
+    })
+    .hide();
     if (settings.multiple) {
-      $element = $('<select>')
-        .attr('id', base_id + '-select-' + level)
-        .attr('multiple', 'multiple')
-        .addClass('shs-select')
-        // Add core class to apply default styles to the element.
-        .addClass('form-select')
-        .addClass('shs-select-level-' + level)
-        .bind('change', function() {
-          updateElements($(this), base_id, settings, level);
-        })
-        .hide();
-    }
-    else {
-      $element = $('<select>')
-        .attr('id', base_id + '-select-' + level)
-        .addClass('shs-select')
-        // Add core class to apply default styles to the element.
-        .addClass('form-select')
-        .addClass('shs-select-level-' + level)
-        .bind('change', function() {
-          updateElements($(this), base_id, settings, level);
-        })
-        .hide();
+      $element.attr('multiple', 'multiple');
     }
     // Return the new element.
     return $element;
@@ -547,32 +538,53 @@
    * @see http://drupal.org/project/chosen
    */
   elementConvertToChosen = function($element, settings) {
-    if (Drupal.settings.chosen) {
-      $element.removeClass('chzn-done');
-      var minWidth = Drupal.settings.chosen.minimum_width;
-      // Define options for chosen.
-      var options = {};
-      options.search_contains = Drupal.settings.chosen.search_contains;
-      options.placeholder_text_multiple = Drupal.settings.chosen.placeholder_text_multiple;
-      options.placeholder_text_single = Drupal.settings.chosen.placeholder_text_single;
-      options.no_results_text = Drupal.settings.chosen.no_results_text;
-
-      // Get element selector from settings (and remove "visible" option since
-      // our select element is hidden by default).
-      var selector = Drupal.settings.chosen.selector.replace(/:visible/, '');
-
-      if ((settings.settings.use_chosen == 'always') || ((settings.settings.use_chosen == 'chosen') && ($element.is(selector) && $element.find('option').size() >= Drupal.settings.chosen.minimum))) {
-        $element.css({
-          width : ($element.width() < minWidth) ? minWidth : $element.width()
-        }).chosen(options);
-        return $element.hasClass('chzn-done');
-      }
-      else if ((settings.settings.use_chosen == 'never') && (!$element.hasClass('chosen-disable'))) {
-        // Tell chosen to not process this element.
-        $element.addClass('chosen-disable');
-      }
+    // Returns false if chosen is not available or its settings are undefined.
+    if (typeof Drupal.settings.chosen == 'undefined' && typeof $.fn.chosen == 'undefined') {
+      return false;
+    }
+
+    settings.chosen = settings.chosen || Drupal.settings.chosen;
+    var minOptions,
+        minWidth = settings.chosen.minimum_width;
+        multiple = Drupal.settings.chosen.multiple,
+        maxSelectedOptions = Drupal.settings.chosen.max_selected_options,
+        options = {};
+
+    // Define options.
+    options.inherit_select_classes = true;
+
+    // Get element selector from settings (and remove "visible" option since
+    // our select element is hidden by default).
+    var selector = settings.chosen.selector.replace(/:visible/, '');
+    var name = $element.attr('name');
+
+    minOptions = settings.chosen.minimum_single;;
+
+    if (multiple && multiple[name] != false) {
+      minOptions = settings.chosen.minimum_multiple;
+    }
+
+    if (maxSelectedOptions && maxSelectedOptions[name] != false) {
+      options.max_selected_options = maxSelectedOptions[name];
+    }
+
+    // Merges the user defined settings for chosen.
+    options = $.extend(options, settings.chosen);
+
+    if ((settings.settings.use_chosen == 'always') || ((settings.settings.use_chosen == 'chosen') && $element.is(selector) && ($element.find('option').size() >= minOptions || minOptions == 'Always Apply'))) {
+      options = $.extend(options, {
+        width: (($element.width() < minWidth) ? minWidth : $element.width()) + 'px'
+      });
+
+      // Applies chosen.
+      $element.chosen(options);
+
+      return $element;
+    }
+    else if ((settings.settings.use_chosen == 'never') && (!$element.hasClass('chosen-disable'))) {
+      // Tell chosen to not process this element.
+      $element.addClass('chosen-disable');
     }
-    return false;
   }
 
 })(jQuery);
