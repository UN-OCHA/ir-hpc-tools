<?php

/**
 * @file
 * Code for the Core feature.
 */

include_once 'hr_core.features.inc';

/**
 * Implements hook_entity_info_alter().
 */
function hr_core_entity_info_alter(&$entity_info) {
  $entity_info['node']['view modes']['search_result'] = array(
    'label' => t('Search result'),
    'custom settings' => TRUE,
  );
  $entity_info['field_collection_item']['view modes']['search_result'] = array(
    'label' => t('Search result'),
    'custom settings' => TRUE,
  );
  $entity_info['fieldable_panels_pane']['view modes']['teaser'] = array(
    'label' => t('Teaser'),
    'custom settings' => TRUE,
  );
  $entity_info['fieldable_panels_pane']['view modes']['link'] = array(
    'label' => t('Link'),
    'custom settings' => TRUE,
  );
  $entity_info['user']['view modes']['teaser'] = array(
    'label' => t('Teaser'),
    'custom settings' => TRUE,
  );
}

/**
 * Implements hook_form_alter().
 *
 * Hides fields if they are empty.
 */
function hr_core_form_alter(&$form, &$form_state, $form_id) {
  foreach ($form as &$item) {
    if (is_array($item) && isset($item['#type']) && $item['#type'] == 'container') {
      switch ($item['#type']) {
        case 'container':
          $language = isset($item['#language']) ? $item['#language'] : LANGUAGE_NONE;
          if (isset($item[$language]['#type']) && $item[$language]['#type'] == 'select') {
            $diff = array_diff($item[$language]['#options'], array('_none' => '- None -'));
            if (empty($diff)) {
              $item['#type'] = 'hidden';
            }
          }
          break;

        case 'select':
          if (empty($item['#options'])) {
            $item['#type'] = 'hidden';
          }
          break;
      }
    }
  }
}

/**
 * Implements hook_pathauto_alias_alter().
 */
function hr_core_pathauto_alias_alter(&$alias, array &$context) {
  // Force all aliases to be saved as language neutral.
  $context['language'] = LANGUAGE_NONE;
}

/**
 * Implements hook_path_insert().
 */
function hr_core_path_insert($path) {
  if ($path['language'] != LANGUAGE_NONE) {
    $initial_path = path_load(
      array('source' => $path['source'], 'language' => LANGUAGE_NONE)
    );
    if (!empty($initial_path)) {
      path_delete($path['pid']);
    }
    else {
      $path['language'] = LANGUAGE_NONE;
      // Resave path.
      path_save($path);
    }
  }
}

/**
 * Implements hook_entity_presave().
 *
 * Makes sure pathauto is not used when no path is set.
 */
function hr_core_entity_presave($node, $type) {
  if (!isset($node->path['pathauto'])) {
    $node->path['pathauto'] = FALSE;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Alter the node edit forms.
 */
function hr_core_form_node_form_alter(&$form, &$form_state) {
  _hr_core_fix_entity_reference_ajax_calls($form, $form_state);
}

/**
 * Implements hook_panels_new_pane_alter().
 *
 * Set default panel style to hr_highlighted.
 */
function hr_core_panels_new_pane_alter(&$pane) {
  $pane->style['style'] = 'hr_highlighted';
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function hr_core_form_panels_ipe_edit_control_form_alter(&$form, &$form_state) {
  $form['buttons']['submit']['#submit'][] = 'hr_core_panels_ipe_clear_cache';
}

/**
 * Additional form callback that clears panelizer page cache.
 */
function hr_core_panels_ipe_clear_cache($form, &$form_state) {
  if (!empty($form_state['panelizer entity'])) {
    $entity = $form_state['panelizer entity'];
    $uri = entity_uri($entity->entity_type, $entity);
    // Clear all language cache.
    $uri['options']['language'] = '';
    if ($url = url($uri['path'], $uri['options'])) {
      // Manually delete the cache because the cid is a full url we don't know
      // how's going to be generated.
      // @See cache_clear_all().
      db_delete('cache_page')
        ->condition('cid', '%' . db_like($url) . '%', 'LIKE')
        ->execute();
    }

  }
}

/**
 * Store initial form values when rendering for the first time.
 *
 * Needed to solve problems with entity reference and AJAX.
 */
function _hr_core_fix_entity_reference_ajax_calls(&$form, &$form_state) {
  $fields_to_save = array(
    'field_acc_geo_location_dest',
    'field_acc_impact_type',
    'field_bundles',
    'field_coordination_hubs',
    'field_disasters',
    'field_geographic_level',
    'field_organizations',
    'field_organizations2',
    'field_parent_cluster',
    'og_group_ref',
  );

  foreach ($fields_to_save as $field_to_save) {
    // Store the options.
    if (isset($form[$field_to_save])) {
      if (!isset($form_state['storage'][$field_to_save])) {
        $form_state['storage'][$field_to_save] = $form[$field_to_save];
      }
      // If it is set, re-fill it.
      else {
        if (isset($form_state['storage'][$field_to_save]) && empty($form[$field_to_save][LANGUAGE_NONE]['#default_value'])) {
          $form[$field_to_save] = $form_state['storage'][$field_to_save];
        }
      }
    }
  }
}
